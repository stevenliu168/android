https://blog.csdn.net/weixin_42514606/article/details/85266193

Windows下运行 Android CTS

叉叉敌

于 2018-12-26 17:48:08 发布

1973
 收藏 2
分类专栏： Android 文章标签： CTS android windows java
版权

Android
专栏收录该内容
10 篇文章0 订阅
订阅专栏
文章目录
1. 背景
2. 了解运行原理
3. 制作BAT批处理文件
4. 还有一种方法.
5. 参考文档
1. 背景
在windows下运行android CTS的文章, 在网上找了一圈, 发现都是老版本的, 而且官方也明确说了, 不支持在window上运行.

Caution: CTS currently supports 64-bit Linux and Mac OS host machines. CTS will not work on Windows OS.
不支持在windows上运行
本篇文章提供2个可以用的方法.

2. 了解运行原理
首先分析下载好的文件8.1的zip包里面的cts-tradefed这个文件, 这个直接用文本工具打开即可.
可以看到下面是检查一些必须工具是否可用
aapt
adb 这个需要配置环境变量, 在Android 8+以上的最好使用 1.0.39+以上的版本
java 版本需要1.8以上
checkFile() {
   if [ ! -f "$1" ]; then
       echo "Unable to locate $1"
       exit
   fi;
}

checkPath() {
   if ! type -P $1 &> /dev/null; then
       echo "Unable to find $1 in path."
       exit
   fi;
}

checkPath aapt  # 检查aapt和adb java版本. 这个版本要求是 adb是1.0.39以上. java是1.8以上
checkPath adb
checkPath java
# check java version
if [ "${EXPERIMENTAL_USE_OPENJDK9}" == "" ]; then
   JAVA_VERSION=$(java -version 2>&1 | head -n 2 | grep '[ "]1\.[678][\. "$$]')
   if [ "${JAVA_VERSION}" == "" ]; then
       echo "Wrong java version. 1.6, 1.7 or 1.8 is required."
       exit
   fi
else
   JAVA_VERSION=$(java -version 2>&1 | head -n 2 | grep '^java .* "9.*')
   if [ "${JAVA_VERSION}" == "" ]; then
       echo "Wrong java version. Version 9 is required."
       exit
   fi
fi

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
再往下走.
这里看注释就好了, 第一个是检查系统版本的, 很显然, 官方也没有撒谎, 就是没有windows或者NT的字眼, 我就是不支持windows, 第二个就是检查android的编译环境, 这个就是设置CTS的运行目录.
# get OS
HOST=`uname`
if [ "$HOST" == "Linux" ]; then
   OS="linux-x86"
elif [ "$HOST" == "Darwin" ]; then
   OS="darwin-x86"
else
   echo "Unrecognized OS"
   exit
fi

# check if in Android build env
if [ ! -z "${ANDROID_BUILD_TOP}" ]; then
   if [ ! -z "${ANDROID_HOST_OUT}" ]; then
     CTS_ROOT=${ANDROID_HOST_OUT}/cts
   else
     CTS_ROOT=${ANDROID_BUILD_TOP}/${OUT_DIR:-out}/host/${OS}/cts
   fi
   if [ ! -d ${CTS_ROOT} ]; then
       echo "Could not find $CTS_ROOT in Android build environment. Try 'make cts'"
       exit
   fi;
fi;

if [ -z ${CTS_ROOT} ]; then
   # assume we're in an extracted cts install
   CTS_ROOT="$(dirname $(readlink -e $0))/../.."
fi;

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
可以看到把CTS_ROOT里面的jar包都添加到JAR_PATH里面去了.
这部分代码的后面部分就是, 导入其他共享库. 在windows就没得到咯:)
JAR_DIR=${CTS_ROOT}/android-cts/tools
JARS="tradefed
  hosttestlib
  compatibility-host-util
  compatibility-host-util-tests
  cts-tradefed
  cts-tradefed-tests
  compatibility-common-util-tests
  compatibility-tradefed-tests
  host-libprotobuf-java-full"

for JAR in $JARS; do
    checkFile ${JAR_DIR}/${JAR}.jar
    JAR_PATH=${JAR_PATH}:${JAR_DIR}/${JAR}.jar
done

OPTIONAL_JARS="
  google-tradefed
  google-tradefed-tests
  google-tf-prod-tests"

for JAR in $OPTIONAL_JARS; do
    if [ -f "${JAR_DIR}/${JAR}.jar" ]; then
        JAR_PATH=${JAR_PATH}:${JAR_DIR}/${JAR}.jar
    fi;
done

# load any shared libraries for host-side executables
LIB_DIR=${CTS_ROOT}/android-cts/lib
if [ "$HOST" == "Linux" ]; then
    LD_LIBRARY_PATH=${LIB_DIR}:${LIB_DIR}64:${LD_LIBRARY_PATH}
    export LD_LIBRARY_PATH
elif [ "$HOST" == "Darwin" ]; then
    DYLD_LIBRARY_PATH=${LIB_DIR}:${LIB_DIR}64:${DYLD_LIBRARY_PATH}
    export DYLD_LIBRARY_PATH
fi

# include any host-side test jars
for j in ${CTS_ROOT}/android-cts/testcases/*.jar; do
    JAR_PATH=${JAR_PATH}:$j
done

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
最后一行就是把这个CTS运行起来的代码.
java $RDBG_FLAG -Xmx4g -XX:+HeapDumpOnOutOfMemoryError -cp ${JAR_PATH} -DCTS_ROOT=${CTS_ROOT} com.android.compatibility.common.tradefed.command.CompatibilityConsole "$@"
1
3. 制作BAT批处理文件
需要把CTS和安卓SDK环境加进来,
把解压好的tools目录的jar包加载到JAR_PATH里面, 然后就可以运行了.
@echo off
set SDK_ROOT=D:\dev\SDK
set CTS_ROOT=D:\dev\android-cts
set "RUN_PATH="
set "JAR_PATH="
set PATH=%PATH%;%SDK_ROOT%\platform-tools\;%SDK_ROOT%\tools\;%SDK_ROOT%\build-tools\27.0.3\
SETLOCAL ENABLEDELAYEDEXPANSION 
 
:: include \android-cts\tools
for %%f in (%CTS_ROOT%\android-cts\tools\*.jar) do set RUN_PATH=%%f;!RUN_PATH!
 
:: include any host-side test jars
for %%f in (%CTS_ROOT%\android-cts\testcases\*.jar) do set JAR_PATH=%%f;!JAR_PATH!
 
java -Xmx200M -cp %RUN_PATH%%JAR_PATH% -DCTS_ROOT=%CTS_ROOT% com.android.compatibility.common.tradefed.command.CompatibilityConsole


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
4. 还有一种方法.
因为CTS官方是不支持windows的, 但是VTS 是可以在windows上运行的. 因此只需要修改VTS为CTS即可.

ps, 这 2 个脚本都上传到github了, 有需要的自取. GITHUB

5. 参考文档
Windows 批处理
stackoverflow问题指点
CTS 官方参考文档
CTS 源代码
VTS 文档
如果你喜欢的话，可以关注个人微信公众号：「叉叉敌」

————————————————
